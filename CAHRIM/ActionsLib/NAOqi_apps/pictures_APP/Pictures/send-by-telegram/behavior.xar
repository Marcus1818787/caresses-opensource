<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Send Pic by Telegram" id="1" localization="8" tooltip="This box sends a picture through Telegram according to the data stored in the memory by&#x0A;CARESSES action TakeAndSendPicture." x="612" y="123"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import requests
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.sMemory = self.session().service("ALMemory")

        data = self.sMemory.getData("CARESSES_send_pic")
        self.sMemory.removeData("CARESSES_send_pic")

        self.recipient = data[4]
        self.message = data[5]
        self.pic_file = data[6]

        text = self.message
        self.pic_file = open(self.pic_file, 'rb')
        self.TELEGRAM_BOT_URL = "https://api.telegram.org/bot610049265:AAEIjdSgq9KrCc0W1Vk4VjQf5ikwqWXxI5I/sendPhoto?chat_id=%s&caption=%s" % (self.recipient, text)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        files = {'photo': self.pic_file }
        status = requests.post(self.TELEGRAM_BOT_URL, files=files)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>